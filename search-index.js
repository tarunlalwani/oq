crystal_doc_search_index_callback({"repository_name":"oq","body":"# oq\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![CI](https://github.com/blacksmoke16/oq/workflows/CI/badge.svg)](https://github.com/blacksmoke16/oq/actions?query=workflow%3ACI)\n[![Latest release](https://img.shields.io/github/release/blacksmoke16/oq.svg)](https://github.com/blacksmoke16/oq/releases)\n[![oq](https://snapcraft.io/oq/badge.svg)](https://snapcraft.io/oq)\n\nA performant, portable [jq](https://github.com/stedolan/jq/) wrapper thats facilitates the consumption and output of formats other than JSON; using `jq` filters to transform the data.\n\n* Compiles to a single binary for easy portability.\n* Performant, similar performance with JSON data compared to `jq`.  Slightly longer execution time when going to/from a non-JSON format.  \n* Supports XML and YAML as additional input/output formats.\n\n## Installation\n\n### Linux via [snap](https://snapcraft.io/)\n\nFor more on installing & using `snap` with your Linux distribution, see the [official documentation](https://docs.snapcraft.io/installing-snapd).\n\n```bash\nsnap install oq\n```\n\n### MacOS\n\n```bash\nbrew tap blacksmoke16/tap\nbrew install oq\n```\n\n### From Source\n\nIf building from source, `jq` will need to be installed separately. Installation instructions can be found in the [official documentation](https://stedolan.github.io/jq/).\n\nRequires Crystal to be installed, see the [installation documentation](https://crystal-lang.org/install).\n\n```bash\ngit clone https://github.com/Blacksmoke16/oq.git\ncd oq/\nshards build --production --release\n```\n\nThe built binary will be available as `./bin/oq`.  This can be relocated elsewhere on your machine; be sure it is in your `PATH` to access it as `oq`.\n\n### Docker\n\n`oq` can easily be included into a Docker image by fetching the static binary from Github for the version of `oq` that you want.\n\n```dockerfile\n# Set an arg to store the oq version that should be installed.\nARG OQ_VERSION=1.1.1\n\n# Grab the binary from the latest Github release and make it executable; placing it within /usr/local/bin.  Can also put it elsewhere if you so desire.\nRUN wget https://github.com/Blacksmoke16/oq/releases/download/v${OQ_VERSION}/oq-${OQ_VERSION}-linux-x86_64 -O /usr/local/bin/oq && chmod +x /usr/local/bin/oq\n\n# Also be sure to install jq if it is not already!\n```\n\n## Usage\n\n### CLI\n\nUse the `oq` binary, with a few optional custom arguments, see `oq --help`.  All other arguments get passed to `jq`. See [jq manual](https://stedolan.github.io/jq/manual/) for details.\n\n### Examples\n\n#### Consume JSON and output XML\n\n```bash\necho '{\"name\": \"Jim\"}' | oq -o xml .\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <name>Jim</name>\n</root>\n```\n\n#### Consume YAML from a file and output XML\n\ndata.yaml\n\n```yaml\n---\nname: Jim\nnumbers:\n  - 1\n  - 2\n  - 3\n```\n\n```bash\noq -i yaml -o xml . data.yaml \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <name>Jim</name>\n  <numbers>1</numbers>\n  <numbers>2</numbers>\n  <numbers>3</numbers>\n</root>\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/Blacksmoke16/oq/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [George Dietrich](https://github.com/Blacksmoke16) - creator, maintainer\n- [Michael Springer](https://github.com/sprngr) - contributor\n","program":{"html_id":"oq/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"oq","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"oq/OQ","path":"OQ.html","kind":"module","full_name":"OQ","name":"OQ","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/converters/json.cr","line_number":1,"url":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/json.cr#L1"},{"filename":"src/oq.cr","line_number":8,"url":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L8"},{"filename":"src/oq_cli.cr","line_number":5,"url":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq_cli.cr#L5"}],"repository_name":"oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.1.1\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A performant, and portable jq wrapper thats facilitates the consumption and output of formats other than JSON; using jq filters to transform the data.","summary":"<p>A performant, and portable jq wrapper thats facilitates the consumption and output of formats other than JSON; using jq filters to transform the data.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"oq/OQ/Converters","path":"OQ/Converters.html","kind":"module","full_name":"OQ::Converters","name":"Converters","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/converters/json.cr","line_number":1,"url":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/json.cr#L1"}],"repository_name":"oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"oq/OQ","kind":"module","full_name":"OQ","name":"OQ"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"oq/OQ/Converters/Json","path":"OQ/Converters/Json.html","kind":"module","full_name":"OQ::Converters::Json","name":"Json","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/converters/json.cr","line_number":1,"url":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/json.cr#L1"}],"repository_name":"oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"oq/OQ/Converters","kind":"module","full_name":"OQ::Converters","name":"Converters"},"doc":null,"summary":null,"class_methods":[{"id":"deserialize(input:IO,output:IO,**args):Nil-class-method","html_id":"deserialize(input:IO,output:IO,**args):Nil-class-method","name":"deserialize","doc":null,"summary":null,"abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"args_string":"(input : IO, output : IO, **args) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/json.cr#L2","def":{"name":"deserialize","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"IO.copy(input, output)"}},{"id":"serialize(input:IO,output:IO,**args):Nil-class-method","html_id":"serialize(input:IO,output:IO,**args):Nil-class-method","name":"serialize","doc":null,"summary":null,"abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"args_string":"(input : IO, output : IO, **args) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/json.cr#L6","def":{"name":"serialize","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"IO.copy(input, output)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"oq/OQ/Converters/Xml","path":"OQ/Converters/Xml.html","kind":"module","full_name":"OQ::Converters::Xml","name":"Xml","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/converters/xml.cr","line_number":1,"url":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/xml.cr#L1"}],"repository_name":"oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"oq/OQ/Converters","kind":"module","full_name":"OQ::Converters","name":"Converters"},"doc":null,"summary":null,"class_methods":[{"id":"deserialize(input:IO,output:IO,**args):Nil-class-method","html_id":"deserialize(input:IO,output:IO,**args):Nil-class-method","name":"deserialize","doc":null,"summary":null,"abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"args_string":"(input : IO, output : IO, **args) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/xml.cr#L2","def":{"name":"deserialize","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"builder = JSON::Builder.new(output)\nxml = XML::Reader.new(input)\nxml.read\nif xml.node_type.none?\n  raise(XML::Error.new(LibXML.xmlGetLastError))\nend\nbuilder.document do\n  builder.object do\n    while !xml.node_type.element?\n      xml.read\n    end\n    process_element_node(xml.expand, builder)\n  end\nend\n"}},{"id":"serialize(input:IO,output:IO,**args):Nil-class-method","html_id":"serialize(input:IO,output:IO,**args):Nil-class-method","name":"serialize","doc":null,"summary":null,"abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"args_string":"(input : IO, output : IO, **args) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/xml.cr#L97","def":{"name":"serialize","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"json = JSON::PullParser.new(input)\nbuilder = XML::Builder.new(output)\nindent, prolog, root, xml_item = self.parse_args(args)\nbuilder.indent = indent\nif prolog\n  builder.start_document(\"1.0\", \"UTF-8\")\nend\nif root.blank?\nelse\n  builder.start_element(root)\nend\nloop do\n  emit(builder, json, xml_item: xml_item)\n  if json.kind.eof?\n    break\n  end\nend\nif root.blank?\nelse\n  builder.end_element\nend\nif prolog\n  builder.end_document\nend\nif prolog\nelse\n  builder.flush\nend\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"oq/OQ/Converters/Yaml","path":"OQ/Converters/Yaml.html","kind":"module","full_name":"OQ::Converters::Yaml","name":"Yaml","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/converters/yaml.cr","line_number":1,"url":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/yaml.cr#L1"}],"repository_name":"oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"oq/OQ/Converters","kind":"module","full_name":"OQ::Converters","name":"Converters"},"doc":null,"summary":null,"class_methods":[{"id":"deserialize(input:IO,output:IO,**args):Nil-class-method","html_id":"deserialize(input:IO,output:IO,**args):Nil-class-method","name":"deserialize","doc":"OPTIMIZE: Figure out a way to handle aliases/anchors while streaming.","summary":"<p><span class=\"flag green\">OPTIMIZE</span>  Figure out a way to handle aliases/anchors while streaming.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"args_string":"(input : IO, output : IO, **args) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/yaml.cr#L3","def":{"name":"deserialize","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"(YAML.parse(input)).to_json(output)"}},{"id":"serialize(input:IO,output:IO,**args):Nil-class-method","html_id":"serialize(input:IO,output:IO,**args):Nil-class-method","name":"serialize","doc":"ameba:disable Metrics/CyclomaticComplexity","summary":"<p>ameba:disable Metrics/CyclomaticComplexity</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"args_string":"(input : IO, output : IO, **args) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/converters/yaml.cr#L8","def":{"name":"serialize","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO"},{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO"}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"json = JSON::PullParser.new(input)\nyaml = YAML::Builder.new(output)\nyaml.stream do\n  yaml.document do\n    loop do\n      case json.kind\n      when .null?\n        yaml.scalar(nil)\n      when .bool?\n        yaml.scalar(json.bool_value)\n      when .int?\n        yaml.scalar(json.int_value)\n      when .float?\n        yaml.scalar(json.float_value)\n      when .string?\n        if YAML::Schema::Core.reserved_string?(json.string_value)\n          yaml.scalar(json.string_value, style: :double_quoted)\n        else\n          yaml.scalar(json.string_value)\n        end\n      when .begin_array?\n        yaml.start_sequence\n      when .end_array?\n        yaml.end_sequence\n      when .begin_object?\n        yaml.start_mapping\n      when .end_object?\n        yaml.end_mapping\n      when .eof?\n        break\n      end\n      json.read_next\n    end\n  end\nend\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"oq/OQ/Format","path":"OQ/Format.html","kind":"enum","full_name":"OQ::Format","name":"Format","abstract":false,"superclass":null,"ancestors":[{"html_id":"oq/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"oq/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"oq/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"oq/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/oq.cr","line_number":12,"url":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L12"}],"repository_name":"oq","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Json","name":"Json","value":"0","doc":null,"summary":null},{"id":"Yaml","name":"Yaml","value":"1","doc":null,"summary":null},{"id":"Xml","name":"Xml","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"oq/OQ","kind":"module","full_name":"OQ","name":"OQ"},"doc":"The support formats that can be converted to/from.","summary":"<p>The support formats that can be converted to/from.</p>","class_methods":[{"id":"to_s(io:IO):Nil-class-method","html_id":"to_s(io:IO):Nil-class-method","name":"to_s","doc":"Returns the list of supported formats.","summary":"<p>Returns the list of supported formats.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L18","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"self.names.join(io, \", \") do |str, join_io|\n  str.downcase(join_io)\nend"}}],"constructors":[],"instance_methods":[{"id":"converter-instance-method","html_id":"converter-instance-method","name":"converter","doc":"Maps a given format to its converter.","summary":"<p>Maps a given format to its converter.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L23","def":{"name":"converter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n        case self\n          {% for format in @type.constants %}\n            in .{{ format.downcase.id }}? then OQ::Converters::{{ format.id }}\n          {% end %}\n        end\n      {% end %}"}},{"id":"json?-instance-method","html_id":"json?-instance-method","name":"json?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L13","def":{"name":"json?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Json"}},{"id":"xml?-instance-method","html_id":"xml?-instance-method","name":"xml?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L15","def":{"name":"xml?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Xml"}},{"id":"yaml?-instance-method","html_id":"yaml?-instance-method","name":"yaml?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L14","def":{"name":"yaml?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Yaml"}}],"macros":[],"types":[]},{"html_id":"oq/OQ/Processor","path":"OQ/Processor.html","kind":"struct","full_name":"OQ::Processor","name":"Processor","abstract":false,"superclass":{"html_id":"oq/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"oq/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"oq/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"oq/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/oq.cr","line_number":34,"url":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L34"}],"repository_name":"oq","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"oq/OQ","kind":"module","full_name":"OQ","name":"OQ"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L34","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"args:Array(String)-instance-method","html_id":"args:Array(String)-instance-method","name":"args","doc":"The args passed to the program.\n\nNon `oq` args are passed to `jq`.","summary":"<p>The args passed to the program.</p>","abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L44","def":{"name":"args","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@args"}},{"id":"indent=(indent:Int32)-instance-method","html_id":"indent=(indent:Int32)-instance-method","name":"indent=","doc":"The number of spaces to use for indentation.","summary":"<p>The number of spaces to use for indentation.</p>","abstract":false,"args":[{"name":"indent","doc":null,"default_value":"","external_name":"indent","restriction":"Int32"}],"args_string":"(indent : Int32)","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L56","def":{"name":"indent=","args":[{"name":"indent","doc":null,"default_value":"","external_name":"indent","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@indent = indent"}},{"id":"input_format=(input_format:Format)-instance-method","html_id":"input_format=(input_format:Format)-instance-method","name":"input_format=","doc":"The format that the input data is in.","summary":"<p>The format that the input data is in.</p>","abstract":false,"args":[{"name":"input_format","doc":null,"default_value":"","external_name":"input_format","restriction":"Format"}],"args_string":"(input_format : Format)","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L36","def":{"name":"input_format=","args":[{"name":"input_format","doc":null,"default_value":"","external_name":"input_format","restriction":"Format"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@input_format = input_format"}},{"id":"output_format=(output_format:Format)-instance-method","html_id":"output_format=(output_format:Format)-instance-method","name":"output_format=","doc":"The format that the output should be transcoded into.","summary":"<p>The format that the output should be transcoded into.</p>","abstract":false,"args":[{"name":"output_format","doc":null,"default_value":"","external_name":"output_format","restriction":"Format"}],"args_string":"(output_format : Format)","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L39","def":{"name":"output_format=","args":[{"name":"output_format","doc":null,"default_value":"","external_name":"output_format","restriction":"Format"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@output_format = output_format"}},{"id":"process:Nil-instance-method","html_id":"process:Nil-instance-method","name":"process","doc":"Consume the input, convert the input to JSON if needed, pass the input/args to `jq`, then convert the output if needed.","summary":"<p>Consume the input, convert the input to JSON if needed, pass the input/args to <code>jq</code>, then convert the output if needed.</p>","abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L62","def":{"name":"process","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"begin\n  self.consume_file_args(\"--rawfile\", \"--argfile\", \"--slurpfile\")\n  self.consume_file_args(\"-f\", \"--from-file\", count: 1)\n  self.extract_args\n  input_read, input_write = IO.pipe\n  output_read, output_write = IO.pipe\n  channel = Channel(Bool).new\n  spawn do\n    begin\n      @input_format.converter.deserialize(ARGF, input_write)\n      input_write.close\n      channel.send(true)\n    rescue ex\n      handle_error(ex)\n    end\n  end\n  spawn do\n    begin\n      output_write.close\n      @output_format.converter.serialize(output_read, STDOUT, indent: (      (@tab ? \"\\t\" : \" \") * @indent), xml_root: @xml_root, xml_prolog: @xml_prolog, xml_item: @xml_item)\n      channel.send(true)\n    rescue ex\n      handle_error(ex)\n    end\n  end\n  run = Process.run(\"jq\", args, input: input_read, output: output_write, error: STDERR)\n  if run.success?\n  else\n    exit(1)\n  end\n  2.times do\n    channel.receive\n  end\nrescue ex\n  handle_error(ex)\nend"}},{"id":"tab=(tab:Bool)-instance-method","html_id":"tab=(tab:Bool)-instance-method","name":"tab=","doc":"If a tab for each indentation level instead of two spaces.","summary":"<p>If a tab for each indentation level instead of two spaces.</p>","abstract":false,"args":[{"name":"tab","doc":null,"default_value":"","external_name":"tab","restriction":"Bool"}],"args_string":"(tab : Bool)","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L59","def":{"name":"tab=","args":[{"name":"tab","doc":null,"default_value":"","external_name":"tab","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@tab = tab"}},{"id":"xml_item=(xml_item:String)-instance-method","html_id":"xml_item=(xml_item:String)-instance-method","name":"xml_item=","doc":"The name for XML array elements without keys.","summary":"<p>The name for XML array elements without keys.</p>","abstract":false,"args":[{"name":"xml_item","doc":null,"default_value":"","external_name":"xml_item","restriction":"String"}],"args_string":"(xml_item : String)","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L53","def":{"name":"xml_item=","args":[{"name":"xml_item","doc":null,"default_value":"","external_name":"xml_item","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@xml_item = xml_item"}},{"id":"xml_prolog=(xml_prolog:Bool)-instance-method","html_id":"xml_prolog=(xml_prolog:Bool)-instance-method","name":"xml_prolog=","doc":"If the XML prolog should be emitted.","summary":"<p>If the XML prolog should be emitted.</p>","abstract":false,"args":[{"name":"xml_prolog","doc":null,"default_value":"","external_name":"xml_prolog","restriction":"Bool"}],"args_string":"(xml_prolog : Bool)","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L50","def":{"name":"xml_prolog=","args":[{"name":"xml_prolog","doc":null,"default_value":"","external_name":"xml_prolog","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@xml_prolog = xml_prolog"}},{"id":"xml_root=(xml_root:String)-instance-method","html_id":"xml_root=(xml_root:String)-instance-method","name":"xml_root=","doc":"The root of the XML document when transcoding to XML.","summary":"<p>The root of the XML document when transcoding to XML.</p>","abstract":false,"args":[{"name":"xml_root","doc":null,"default_value":"","external_name":"xml_root","restriction":"String"}],"args_string":"(xml_root : String)","source_link":"https://github.com/Blacksmoke16/oq/blob/v1.1.1/src/oq.cr#L47","def":{"name":"xml_root=","args":[{"name":"xml_root","doc":null,"default_value":"","external_name":"xml_root","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@xml_root = xml_root"}}],"macros":[],"types":[]}]}]}})